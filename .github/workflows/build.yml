name: Build and test environment

on:
  pull_request:
    branches:
      - main
    paths:
      - '**/*.yml'
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      constraint:
        description: which versions of dependencies to constrain
        required: true
        type: choice
        options:
          - stable
          - latest
          - dev
        default: latest
      release:
        description: upload exported files to a release of the current tag
        required: false
        type: boolean

defaults:
  run:
    shell: bash -l {0}

jobs:
  variables:
    name: set up environment variables
    runs-on: ubuntu-latest
    steps:
      - run: echo "HOME=$HOME" >> $GITHUB_ENV
      - run: |
          touch ci_env.txt
          echo "HOME=${{ env.HOME }}" >> ci_env.txt
          echo "CONSTRAINT=$(if [ -z ${{ github.event.inputs.constraint }} ]; then echo latest; else echo ${{ github.event.inputs.constraint }}; fi)" >> ci_env.txt
          echo "CRDS_PATH=${{ env.HOME }}/crds_cache" >> ci_env.txt
          echo "PYSYN_CDBS=${{ env.HOME }}/trds" >> ci_env.txt
      - uses: actions/upload-artifact@v3
        with:
          name: ci-env
          path: ci_env.txt
  build:
    name: build ${{ github.event.inputs.constraint }} Python ${{ matrix.python }} environment on ${{ matrix.os }}
    needs: [ variables ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python: [ '3.8', '3.9', '3.10', '3.11' ]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ci-env
      - run: sed -i'' -e 's/\/home\//\/Users\//g' ci_env.txt
        if: runner.os == 'MacOS'
      - run: cat ci_env.txt >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: sed -i"" -e "s/python==3.9/python==${{ matrix.python }}/g" stenv-${{ env.CONSTRAINT }}.yml
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - uses: mamba-org/provision-with-micromamba@v14
        with:
          environment-name: stenv-${{ runner.os }}-py${{ matrix.python }}-${{ env.CONSTRAINT }}
          environment-file: stenv-${{ env.CONSTRAINT }}.yml
          cache-env: true
          cache-downloads: true
      - run: pip freeze
      - run: pytest -n auto tests/test_import.py
  unit_tests:
    name: run `${{ matrix.package }}` unit tests in ${{ github.event.inputs.constraint }} Python ${{ matrix.python }} environment on ${{ matrix.os }}
    needs: [ variables, build ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        package: [ acstools, asdf, ccdproc, costools, jwst, reftools, synphot, wfpc2tools ]
        os: [ ubuntu-latest, macos-latest ]
        python: [ '3.8', '3.9', '3.10', '3.11' ]
        include:
          - package: acstools
            extras: [ test ]
          - package: asdf
            extras: [ tests ]
          - package: ccdproc
            extras: [ test ]
          - package: costools
          - package: jwst
            extras: [ test ]
            env:
              CRDS_SERVER_URL: https://jwst-crds.stsci.edu
            pytest_args: '--slow'
          #- package: pysynphot
          #  extras: [ test ]
          - package: reftools
            extras: [ test ]
          - package: synphot
            extras: [ test ]
          - package: wfpc2tools
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ci-env
      - run: sed -i'' -e 's/\/home\//\/Users\//g' ci_env.txt
        if: runner.os == 'MacOS'
      - run: cat ci_env.txt >> $GITHUB_ENV
      - uses: actions/checkout@v3
      - run: sed -i"" -e "s/python==3.9/python==${{ matrix.python }}/g" stenv-${{ env.CONSTRAINT }}.yml
      - uses: mamba-org/provision-with-micromamba@v14
        with:
          environment-name: stenv-${{ runner.os }}-py${{ matrix.python }}-${{ env.CONSTRAINT }}
          environment-file: stenv-${{ env.CONSTRAINT }}.yml
          cache-env: true
          cache-downloads: true
      - run: pip install "${{ matrix.package }}[${{ join(matrix.extras, ',') }}]"
        if: matrix.extras != ''
      - run: ${{ join(matrix.commands, ' && ') }}
        if: matrix.commands != ''
      - run: pip freeze
      - run: echo "CRDS_CONTEXT=$(crds list --operational-context)" >> $GITHUB_ENV
        if: matrix.env.CRDS_SERVER_URL != ''
        env:
          CRDS_SERVER_URL: ${{ matrix.env.CRDS_SERVER_URL }}
      - uses: actions/cache@v3
        if: env.CRDS_CONTEXT != ''
        with:
          path: ${{ env.CRDS_PATH }}
          key: crds-${{ env.CRDS_CONTEXT }}
      - run: crds sync --contexts ${{ env.CRDS_CONTEXT }}
        if: env.CRDS_CONTEXT != ''
        env:
          CRDS_SERVER_URL: ${{ matrix.env.CRDS_SERVER_URL }}
      - run: pytest -n auto ${{ matrix.pytest_args }} --pyargs ${{ matrix.package }}
        env:
          CRDS_SERVER_URL: ${{ matrix.env.CRDS_SERVER_URL }}
  unit_tests_from_source:
    name: run `${{ matrix.package }}` unit tests from source in ${{ github.event.inputs.constraint }} Python ${{ matrix.python }} environment on ${{ matrix.os }}
    needs: [ variables, build ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        package: [ calcos, hstcal, stsynphot ]
        os: [ ubuntu-latest, macos-latest ]
        python: [ '3.8', '3.9', '3.10', '3.11' ]
        include:
          - package: calcos
            repository: spacetelescope/calcos
          #- package: crds
          #  repository: spacetelescope/crds
          #  extras: [ test ]
          #  env:
          #    CRDS_SERVER_URL: https://hst-crds.stsci.edu
          #  pre_command: './setup_test_cache $HOME && source envs/hst-crds-ops.sh &&'
          #- package: drizzlepac
          #  repository: spacetelescope/drizzlepac
          #  extras: [ test ]
          - package: hstcal
            repository: spacetelescope/hstcal
            pytest_args: '--slow'
            test_directory: tests
            env:
              CRDS_SERVER_URL: https://hst-crds.stsci.edu
          #- package: stistools
          #  repository: spacetelescope/stistools
          - package: stsynphot
            repository: spacetelescope/stsynphot_refactor
            extras: [ test ]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ci-env
      - run: sed -i'' -e 's/\/home\//\/Users\//g' ci_env.txt
        if: runner.os == 'MacOS'
      - run: cat ci_env.txt >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          path: stenv
      - run: sed -i"" -e "s/python==3.9/python==${{ matrix.python }}/g" stenv-${{ env.CONSTRAINT }}.yml
      - uses: mamba-org/provision-with-micromamba@v14
        with:
          environment-name: stenv-${{ runner.os }}-py${{ matrix.python }}-${{ env.CONSTRAINT }}
          environment-file: stenv/stenv-${{ env.CONSTRAINT }}.yml
          cache-env: true
          cache-downloads: true
      - run: echo "package_version=$(conda list | awk '$1 == "${{ matrix.package }}" {print $2}')" >> $GITHUB_ENV
        # TODO: figure out a better way to use package version when checking out a Git ref
        if: env.CONSTRAINT != 'dev'
      - uses: actions/checkout@v3
        with:
          path: ${{ matrix.package }}
          repository: ${{ matrix.repository }}
          ref: ${{ env.package_version }}
      - run: cd ${{ matrix.package }} && pip install ".[${{ join(matrix.extras, ',') }}]"
        if: matrix.extras != ''
      - run: cd ${{ matrix.package }} && ${{ join(matrix.commands, ' && ') }}
        if: matrix.commands != ''
      - run: pip freeze
      - run: echo "CRDS_CONTEXT=$(crds list --operational-context)" >> $GITHUB_ENV
        if: matrix.env.CRDS_SERVER_URL != ''
        env:
          CRDS_SERVER_URL: ${{ matrix.env.CRDS_SERVER_URL }}
      - uses: actions/cache@v3
        if: env.CRDS_CONTEXT != ''
        with:
          path: ${{ env.CRDS_PATH }}
          key: crds-${{ env.CRDS_CONTEXT }}
      - run: crds sync --contexts ${{ env.CRDS_CONTEXT }}
        if: env.CRDS_CONTEXT != ''
        env:
          CRDS_SERVER_URL: ${{ matrix.env.CRDS_SERVER_URL }}
      - run: cd ${{ matrix.package }} && ${{ matrix.pre_command }} pytest -n auto ${{ matrix.pytest_args }} ${{ matrix.test_directory }}
        env:
          CRDS_SERVER_URL: ${{ matrix.env.CRDS_SERVER_URL }}
  smoke_tests:
    name: run `${{ matrix.package }}` smoke tests in ${{ github.event.inputs.constraint }} Python ${{ matrix.python }} environment on ${{ matrix.os }}
    needs: [ variables, build ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        package: [ calcos, drizzlepac ]
        os: [ ubuntu-latest, macos-latest ]
        python: [ '3.8', '3.9', '3.10', '3.11' ]
        include:
          - package: calcos
            run: calcos la8n01qkq_rawtag_a.fits
            env:
              CRDS_SERVER_URL: https://hst-crds.stsci.edu
              jref: hst/references/hst/
          - package: drizzlepac
            run: pytest -n auto tests/test_drizzlepac.py
            env:
              CRDS_SERVER_URL: https://hst-crds.stsci.edu
              jref: hst/references/hst/
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ci-env
      - run: sed -i'' -e 's/\/home\//\/Users\//g' ci_env.txt
        if: runner.os == 'MacOS'
      - run: cat ci_env.txt >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          lfs: true
      - run: sed -i"" -e "s/python==3.9/python==${{ matrix.python }}/g" stenv-${{ env.CONSTRAINT }}.yml
      - uses: mamba-org/provision-with-micromamba@v14
        with:
          environment-name: stenv-${{ runner.os }}-py${{ matrix.python }}-${{ env.CONSTRAINT }}
          environment-file: stenv-${{ env.CONSTRAINT }}.yml
          cache-env: true
          cache-downloads: true
      - run: pip install ".[${{ join(matrix.extras, ',') }}]"
        if: matrix.extras != ''
      - run: ${{ join(matrix.commands, ' && ') }}
        if: matrix.commands != ''
      - run: pip freeze
      - run: echo "CRDS_CONTEXT=$(crds list --operational-context)" >> $GITHUB_ENV
        if: matrix.env.CRDS_SERVER_URL != ''
        env:
          CRDS_SERVER_URL: ${{ matrix.env.CRDS_SERVER_URL }}
          jref: ${{ env.CRDS_PATH }}/${{ matrix.env.jref }}
      - uses: actions/cache@v3
        if: env.CRDS_CONTEXT != ''
        with:
          path: ${{ env.CRDS_PATH }}
          key: crds-${{ env.CRDS_CONTEXT }}
      - run: crds sync --contexts ${{ env.CRDS_CONTEXT }}
        if: env.CRDS_CONTEXT != ''
        env:
          CRDS_SERVER_URL: ${{ matrix.env.CRDS_SERVER_URL }}
      - uses: actions/cache@v3
        with:
          path: 'tests/data/'
          key: data-${{ hashFiles('tests/data/*') }}
      - run: ${{ matrix.run }}
        env:
          CRDS_SERVER_URL: ${{ matrix.env.CRDS_SERVER_URL }}
          jref: ${{ env.CRDS_PATH }}/${{ matrix.env.jref }}
  export:
    name: export ${{ github.event.inputs.constraint }} Python ${{ matrix.python }} environment on ${{ matrix.os }}
    needs: [ variables, unit_tests, unit_tests_from_source, smoke_tests ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python: [ '3.8', '3.9', '3.10', '3.11' ]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ci-env
      - run: sed -i'' -e 's/\/home\//\/Users\//g' ci_env.txt
        if: runner.os == 'MacOS'
      - run: cat ci_env.txt >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: sed -i"" -e "s/python==3.9/python==${{ matrix.python }}/g" stenv-${{ env.CONSTRAINT }}.yml
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - uses: mtkennerly/dunamai-action@v1
        id: version
        with:
          args: --pattern "(?P<base>\d+\.\d+\.\d+)"
      # TODO: change following to `provision-with-micromamba` after https://github.com/mamba-org/mamba/issues/2008
      - run: echo "::set-output name=date::$(date +'%a %b %d %Y')"
        id: date
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: stenv-${{ runner.os }}-py${{ matrix.python }}-${{ env.CONSTRAINT }}
          python-version: ${{ matrix.python }}
          mamba-version: '*'
          channels: conda-forge,defaults
          channel-priority: true
          use-only-tar-bz2: true
      - uses: actions/cache@v3
        with:
          path: |
            ${{ env.HOME }}/conda_pkgs_dir
            ${{ env.CONDA }}/envs/stenv-${{ runner.os }}-py${{ matrix.python }}-${{ env.CONSTRAINT }}
          key: "mamba-env ${{ runner.os }}-${{ runner.arch }} ${{ steps.date.outputs.date }} file: ${{ hashFiles(format('stenv-{0}.yml', env.CONSTRAINT)) }}"
      - run: mamba env update -n stenv-${{ runner.os }}-py${{ matrix.python }}-${{ env.CONSTRAINT }} -f stenv-${{ env.CONSTRAINT }}.yml
      - run: conda env export --no-build > stenv-${{ runner.os }}-py${{ matrix.python }}-${{ steps.version.outputs.version }}-${{ env.CONSTRAINT }}.yml
      # TODO: change previous to `provision-with-micromamba` after https://github.com/mamba-org/mamba/issues/2008
      - run: |
          sed -i "/name:/d" stenv-${{ runner.os }}-py${{ matrix.python }}-${{ steps.version.outputs.version }}-${{ env.CONSTRAINT }}.yml
          sed -i "/prefix:/d" stenv-${{ runner.os }}-py${{ matrix.python }}-${{ steps.version.outputs.version }}-${{ env.CONSTRAINT }}.yml
        if: runner.os == 'Linux'
      - run: |
          sed -i "" "/name:/d" stenv-${{ runner.os }}-py${{ matrix.python }}-${{ steps.version.outputs.version }}-${{ env.CONSTRAINT }}.yml
          sed -i "" "/prefix:/d" stenv-${{ runner.os }}-py${{ matrix.python }}-${{ steps.version.outputs.version }}-${{ env.CONSTRAINT }}.yml
        if: runner.os == 'MacOS'
      - run: cat stenv-${{ runner.os }}-py${{ matrix.python }}-${{ steps.version.outputs.version }}-${{ env.CONSTRAINT }}.yml
      - uses: actions/upload-artifact@v3
        with:
          name: stenv-${{ runner.os }}-py${{ matrix.python }}-${{ steps.version.outputs.version }}-${{ env.CONSTRAINT }}.yml
          path: stenv-${{ runner.os }}-py${{ matrix.python }}-${{ steps.version.outputs.version }}-${{ env.CONSTRAINT }}.yml
      - uses: svenstaro/upload-release-action@2.3.0
        if: (github.event_name == 'release' && github.event.action == 'published') || github.event.inputs.release == 'true'
        with:
          file: stenv-${{ runner.os }}-py${{ matrix.python }}-${{ steps.version.outputs.version }}-${{ env.CONSTRAINT }}.yml
