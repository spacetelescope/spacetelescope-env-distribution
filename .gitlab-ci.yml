image: mambaorg/micromamba:latest

before_script:
  - eval "$(micromamba shell hook --shell=bash)"
  - mkdir -p ./conda/
  - touch .condarc
  - micromamba config append --file .condarc pkgs_dirs ./conda/pkgs
  - micromamba config append --file .condarc envs_dirs ./conda/envs

cache:
  key: cache-$CI_RUNNER_EXECUTABLE_ARCH-$CI_COMMIT_REF_SLUG
  paths:
    - ./conda/

build:
  stage: build
  parallel:
    matrix:
      - PYTHON: ["3.9", "3.10", "3.11"]
        RUNNER: ["test"]
  tags:
    - $RUNNER
  script:
    - micromamba create -y -c conda-forge --prefix ./conda/envs/stenv --file environment.yaml python=$PYTHON conda gcc gxx_linux-64 --rc-file .condarc
    - micromamba activate ./conda/envs/stenv
    - conda env export --no-build | grep -v "name:" | grep -v "prefix:"
    - pytest -n auto tests/test_import.py --junitxml result.xml
  artifacts:
    when: always
    reports:
      junit: result.xml

unit-tests:
  stage: test
  parallel:
    matrix:
      - PACKAGE: acstools
        PYTHON: ["3.9", "3.10", "3.11"]
        RUNNER: ["test"]
        EXTRAS: ["test"]
      - PACKAGE: asdf
        PYTHON: ["3.9", "3.10", "3.11"]
        RUNNER: ["test"]
        EXTRAS: ["tests"]
      - PACKAGE: ccdproc
        PYTHON: ["3.9", "3.10", "3.11"]
        RUNNER: ["test"]
        EXTRAS: ["test"]
      - PACKAGE: costools
        PYTHON: ["3.9", "3.10", "3.11"]
        RUNNER: ["test"]
      - PACKAGE: reftools
        PYTHON: ["3.9", "3.10", "3.11"]
        RUNNER: ["test"]
        EXTRAS: ["test"]
      - PACKAGE: synphot
        PYTHON: ["3.9", "3.10", "3.11"]
        RUNNER: ["test"]
        EXTRAS: ["test"]
      - PACKAGE: wfpc2tools
        PYTHON: ["3.9", "3.10", "3.11"]
        RUNNER: ["test"]
  tags:
    - $RUNNER
  script:
    - micromamba create -y -c conda-forge --prefix ./conda/envs/stenv --file environment.yaml python=$PYTHON conda gcc gxx_linux-64 --rc-file .condarc
    - micromamba activate ./conda/envs/stenv
    - conda env export --no-build | grep -v "name:" | grep -v "prefix:"
    - pip install $PACKAGE[$EXTRAS]
    - pytest -n auto --pyargs $PACKAGE $pytest_args --junitxml result.xml
  artifacts:
    when: always
    reports:
      junit: result.xml

unit-tests-from-source:
  stage: test
  parallel:
    matrix:
      - PACKAGE: calcos
        PYTHON: ["3.9", "3.10", "3.11"]
        RUNNER: ["test"]
        REPOSITORY: https://github.com/spacetelescope/calcos
      #- PACKAGE: crds
      #  PYTHON: ["3.9", "3.10", "3.11"]
      #  RUNNER: ["test"]
      #  REPOSITORY: https://github.com/spacetelescope/crds
      #  EXTRAS: [ test ]
      #  env:
      #    CRDS_SERVER_URL: https://hst-crds.stsci.edu
      #  pre_command: './setup_test_cache $HOME && source envs/hst-crds-ops.sh'
      #- PACKAGE: drizzlepac
      #  PYTHON: ["3.9", "3.10", "3.11"]
      #  RUNNER: ["test"]
      #  REPOSITORY: https://github.com/spacetelescope/drizzlepac
      #  EXTRAS: [ test ]
      - PACKAGE: hstcal
        PYTHON: ["3.9", "3.10", "3.11"]
        RUNNER: ["test"]
        REPOSITORY: https://github.com/spacetelescope/hstcal
        pytest_args: '--slow'
        test_directory: tests
        CRDS_SERVER_URL: https://hst-crds.stsci.edu
      - PACKAGE: jwst
        PYTHON: ["3.9", "3.10", "3.11"]
        RUNNER: ["test"]
        REPOSITORY: https://github.com/spacetelescope/jwst
        extras: [ test ]
        pytest_args: '--slow -k "not test_cmdline_status"'
        CRDS_SERVER_URL: https://jwst-crds.stsci.edu
  tags:
    - $RUNNER
  script:
    - micromamba create -y -c conda-forge --prefix ./conda/envs/stenv --file environment.yaml python=$PYTHON conda gcc gxx_linux-64 --rc-file .condarc
    - micromamba activate ./conda/envs/stenv
    - conda env export --no-build | grep -v "name:" | grep -v "prefix:"
    - pip install -e .[$EXTRAS]
    - pytest -n auto $pytest_args $test_directory --junitxml result.xml
  artifacts:
    when: always
    reports:
      junit: result.xml

smoke-tests:
  stage: test
  parallel:
    matrix:
      - PYTHON: ["3.9", "3.10", "3.11"]
        RUNNER: ["test"]
        COMMAND: ["calcos la8n01qkq_rawtag_a.fits", "pytest -n auto tests/test_drizzlepac.py"]
  tags:
    - $RUNNER
  script:
    - micromamba create -y -c conda-forge --prefix ./conda/envs/stenv --file environment.yaml python=$PYTHON conda gcc gxx_linux-64 --rc-file .condarc
    - micromamba activate ./conda/envs/stenv
    - conda env export --no-build | grep -v "name:" | grep -v "prefix:"
    - $COMMAND

version:
  stage: build
  cache:
    key: cache-dunamai
    paths:
      - ./conda/
  script:
    - micromamba create -y -c conda-forge --prefix ./conda/envs/dunamai python dunamai git --rc-file .condarc
    - micromamba activate ./conda/envs/dunamai
    - micromamba env export --no-build | grep -v "name:" | grep -v "prefix:"
    - git config --global --add safe.directory $CI_PROJECT_DIR
    - echo VERSION=$(dunamai from any --pattern "(?P<base>\d+\.\d+\.\d+)") >> variables.env
  artifacts:
    reports:
        dotenv: variables.env

export:
  stage: deploy
  needs: [version, build]
  parallel:
    matrix:
      - PYTHON: ["3.9", "3.10", "3.11"]
        RUNNER: ["test"]
  tags:
    - $RUNNER
  script:
    - micromamba create -y -c conda-forge --prefix ./conda/envs/stenv --file environment.yaml python=$PYTHON conda gcc gxx_linux-64 --rc-file .condarc
    - micromamba activate ./conda/envs/stenv
    - export ENVIRONMENT_FILENAME=$(echo "stenv-$CI_RUNNER_EXECUTABLE_ARCH-$PYTHON.yaml" | tr / _)
    - conda env export --no-build | grep -v "name:" | grep -v "prefix:" > $ENVIRONMENT_FILENAME
    - cat $ENVIRONMENT_FILENAME
  artifacts:
    paths:
      - stenv-*.yaml
  environment: production
